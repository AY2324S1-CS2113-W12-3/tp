@startuml
hide circle
skinparam classAttributeIconSize 0

class Ui {

    {static} + COLUMN_WIDTH: int = 10
    {static} + LIST_COLUMN_WIDTH: int = 30
    {static} - ELLIPSIS: String = "..."
    {static} - PROGRAM_NAME: String = "FinText"
    {static} - FILLER_CHAR: char = ' '
    {static} - LIST_SEPARATOR: char = '='
    {static} - ID_COLUMN_WIDTH: int = 3
    {static} - SPACE_BETWEEN_COLS: int = 3
    {static} - AMOUNT_FORMAT: String = "%.2f"
    {static} - LINE_DELIMITER: char = '\\n'

    + Ui()
    + Ui(outputstream: OutputStream)
    + printTableRow(rowValues: ArrayList<String>): void
    + printTableRow(rowValues: ArrayList<String>, headers: String[]): void
    + printTableRow(rowValues: ArrayList<String>, headers: String[], customWidths: Integer[]): void
    + printTableRows(rows: ArrayList<ArrayList<String>>): void
    + printTableRows(rows: ArrayList<ArrayList<String>>, headers: String[]): void
    + printTableRows(rows: ArrayList<ArrayList<String>>, headers: String[], customWidths: Integer[]): void
    + printTableHeader(headers: String[], customWidths: Integer[])
    + formatAmount(value: Double): String
    + print(value: String): String
    + printGreeting(): String
    + printBye(): String
    + readUserInput(): String
    + close(): void
    - genColWidths(length: int, width: int): ArrayList<Integer>
    - getDefaultColWidths(length: int): ArrayList<Integer>
    - getPrintWidths(colWidths: ArrayList<Integer>, customWidths: Integer[]): ArrayList<Integer>
    - mergeColWidths(colWidths: ArrayList<Integer>, customWidths: ArrayList<Integer>): ArrayList<Integer>
    - mergeColWidths(colWidths: ArrayList<Integer>, customWidths: Integer[]): ArrayList<Integer>
    - formatColumnValues(colWidths: ArrayList<Integer>, colValues: ArrayList<String>): String
    - listTransactions(list: ArrayList<ArrayList<String>>, headers: String[], headerMessage: String): void
}

package "java.io" #DDDDDD {
    class "{{abstract}}\nOutputStream" {
        + <U+007B><U+007B>abstract<U+007D><U+007D> write(b: int): void
        + write(b: byte[]): void
        + flush(): void
    }
}


package "java.util" #DDDDDD {
    class Scanner {
        + Scanner(i: InputStream)
        + nextLine(): String
        + close(): void
    }
}

Ui --> "{{abstract}}\nOutputStream" :> uses
Ui --> Scanner :> uses
@enduml